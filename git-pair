#!/bin/bash
#
# Git Pair Mode - A tool to annotate Git commits with pair programming metadata
# Copyright (c) 2025 @stanams
# Licensed under the MIT License. See LICENSE file for details.

# Configuration
PAIR_FILE=".git/.pair"
HOOK_PATH=".git/hooks/prepare-commit-msg"
HOOK_SCRIPT="$(pwd)/hooks/prepare-commit-msg"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to show usage
show_usage() {
    echo -e "${BLUE}ü§ñ Git Pair Mode - A tool to annotate Git commits with pair programming metadata${NC}"
    echo
    echo -e "${BLUE}üìã Basic Commands:${NC}"
    echo "  git pair              # Interactive mode - prompts for GitHub username"
    echo "  git pair --with USER  # Enable pair mode with specific GitHub username"
    echo "  git pair --off        # Disable pair mode"
    echo "  git pair status       # Show current pair mode status"
    echo "  git pair stats        # Show today's pairing statistics"
    echo "  git pair --help       # Show this help message"
    echo
    echo -e "${BLUE}üìä Statistics Options:${NC}"
    echo "  git pair stats        # Show today's stats"
    echo "  git pair stats week   # Show this week's stats"
    echo "  git pair stats month  # Show this month's stats"
    echo
    echo -e "${BLUE}üìù Commit Commands:${NC}"
    echo "  git commit -m \"msg\"     # Add pair info to commit body"
    echo "  git pair-commit -m \"msg\" # Add pair info to commit title"
    echo
    echo -e "${BLUE}‚ùì Examples:${NC}"
    echo "  # Start a pairing session"
    echo "  git pair"
    echo "  git pair --with john"
    echo
    echo "  # Check status and stats"
    echo "  git pair status"
    echo "  git pair stats week"
    echo
    echo "  # Make commits with pair info"
    echo "  git commit -m \"feat: add new feature\""
    echo "  git pair-commit -m \"fix: bug in login\""
    echo
    echo "  # End pairing session"
    echo "  git pair --off"
}

# Function to verify GitHub username
verify_github_username() {
    local username=$1
    
    # Check if curl is available
    if ! command -v curl &> /dev/null; then
        echo -e "${RED}‚ùå Error: curl is required for GitHub username verification${NC}"
        return 1
    fi
    
    # Check if username exists on GitHub
    local response
    response=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/users/$username")
    
    if [ "$response" = "404" ]; then
        echo -e "${RED}‚ùå Error: GitHub username '$username' does not exist${NC}"
        return 1
    elif [ "$response" != "200" ]; then
        echo -e "${RED}‚ùå Error: Could not verify GitHub username (HTTP $response)${NC}"
        return 1
    fi
    
    return 0
}

# Function to show pairing statistics
show_stats() {
    local period=${1:-day}  # Default to day if no period specified
    
    # Get date range based on period
    local start_date
    case $period in
        day)
            start_date=$(date -v-1d +%Y-%m-%d)
            period_text="today"
            ;;
        week)
            start_date=$(date -v-7d +%Y-%m-%d)
            period_text="this week"
            ;;
        month)
            start_date=$(date -v-1m +%Y-%m-%d)
            period_text="this month"
            ;;
        *)
            echo -e "${RED}‚ùå Invalid period. Use: day, week, or month${NC}"
            return 1
            ;;
    esac
    
    echo -e "${BLUE}üìä Pair Programming Statistics ($period_text)${NC}"
    echo -e "${BLUE}----------------------------------------${NC}"
    
    # Get commit stats
    local total_commits=$(git log --since="$start_date" --pretty=format:"%H" | wc -l | tr -d ' ')
    local paired_commits=$(git log --since="$start_date" --grep="(paired with @" --pretty=format:"%H" | wc -l | tr -d ' ')
    
    echo -e "üìù Total commits: ${GREEN}$total_commits${NC}"
    echo -e "üë• Paired commits: ${GREEN}$paired_commits${NC}"
    
    if [ $total_commits -gt 0 ]; then
        local pair_percentage=$((paired_commits * 100 / total_commits))
        echo -e "üìà Pair percentage: ${GREEN}$pair_percentage%${NC}"
    fi
    
    # Show pairing partners
    echo -e "\n${BLUE}ü§ù Pairing Partners:${NC}"
    git log --since="$start_date" --grep="(paired with @" --pretty=format:"%s" | \
        grep -o "@[a-zA-Z0-9-]*" | sort | uniq -c | sort -nr | \
        while read count username; do
            echo -e "${GREEN}$count${NC} commits with $username"
        done
}

# Function to enable pair mode
enable_pair_mode() {
    local username=$1
    
    # Verify GitHub username
    if ! verify_github_username "$username"; then
        echo -e "${RED}‚ùå Please run the command again with a valid GitHub username${NC}"
        return 1
    fi
    
    # Create .git directory if it doesn't exist
    mkdir -p .git
    
    # Save pair info
    echo "pairer=$username" > "$PAIR_FILE"
    
    # Install hook if not already installed
    if [ ! -f "$HOOK_PATH" ]; then
        mkdir -p .git/hooks
        cp "$HOOK_SCRIPT" "$HOOK_PATH"
        chmod +x "$HOOK_PATH"
    fi
    
    echo -e "${GREEN}‚úÖ Pair mode enabled with @$username${NC}"
    echo -e "${BLUE}üìù Available commit commands:${NC}"
    echo "git commit -m \"msg\"     # Add pair info to commit body"
    echo "git pair-commit -m \"msg\" # Add pair info to commit title"
}

# Function to show current status
show_status() {
    if [ ! -f "$PAIR_FILE" ]; then
        echo -e "${YELLOW}üî¥ Pair mode is OFF${NC}"
        echo -e "${BLUE}Would you like to activate pair mode? (y/n, press Enter for no)${NC}"
        read -n1 -s response
        echo  # Add a newline after the single character input
        if [[ "$response" =~ ^[Yy]$ ]]; then
            interactive_mode
        fi
        return
    fi
    
    local pairer=$(grep "^pairer=" "$PAIR_FILE" | cut -d'=' -f2)
    
    echo -e "${GREEN}üü¢ Pair mode is ON${NC}"
    echo -e "üë• Pairing with: ${GREEN}@$pairer${NC}"
    echo
    echo -e "${BLUE}üìã Available commands:${NC}"
    echo "git pair --off          # Disable pair mode"
    echo "git pair stats         # Show today's stats"
    echo "git pair stats week    # Show this week's stats"
    echo "git pair stats month   # Show this month's stats"
    echo
    echo -e "${BLUE}üìù Available commit commands:${NC}"
    echo "git commit -m \"msg\"     # Add pair info to commit body"
    echo "git pair-commit -m \"msg\" # Add pair info to commit title"
}

# Function to handle interactive mode
interactive_mode() {
    echo -e "${BLUE}üë§ Enter GitHub username:${NC}"
    read -r username
    
    if [ -z "$username" ]; then
        echo -e "${RED}‚ùå Username cannot be empty${NC}"
        return 1
    fi
    
    enable_pair_mode "$username"
}

# Main script logic
case "$1" in
    --with)
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Error: Please provide a GitHub username${NC}"
            show_usage
            exit 1
        fi
        enable_pair_mode "$2"
        ;;
    --off)
        if [ -f "$PAIR_FILE" ]; then
            rm "$PAIR_FILE"
            echo -e "${GREEN}‚úÖ Pair mode disabled${NC}"
        else
            echo -e "${YELLOW}‚ÑπÔ∏è  Pair mode is already off${NC}"
        fi
        ;;
    -h|--help|help)
        show_usage
        ;;
    status)
        show_status
        ;;
    stats)
        show_stats "$2"
        ;;
    *)
        if [ -z "$1" ]; then
            interactive_mode
        else
            show_usage
        fi
        ;;
esac 